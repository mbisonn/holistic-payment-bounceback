-- Open dashboard reads: allow anyone (anon, authenticated) to SELECT from dashboard tables
-- Writes remain admin-only via existing policies

DO $$
DECLARE t text;
DECLARE pol RECORD;
DECLARE tables text[] := ARRAY[
  'products',
  'orders',
  'orders_products',
  'profiles',
  'customers',
  'customer_tags',
  'tags',
  'discount_codes',
  'upsell_products',
  'downsells',
  'order_bumps',
  'email_campaigns',
  'scheduled_emails',
  'email_logs',
  'email_templates',
  'automations',
  'automation_rules',
  'analytics_metrics',
  'shipping_settings',
  'shipping_zones',
  'store_settings',
  'invoices'
];
BEGIN
  FOREACH t IN ARRAY tables LOOP
    IF EXISTS (
      SELECT 1 FROM information_schema.tables
      WHERE table_schema='public' AND table_name=t
    ) THEN
      EXECUTE format('ALTER TABLE public.%I ENABLE ROW LEVEL SECURITY', t);

      -- Drop existing SELECT policies to avoid duplicates
      FOR pol IN
        SELECT policyname, cmd
        FROM pg_policies
        WHERE schemaname='public' AND tablename=t AND cmd='select'
      LOOP
        EXECUTE format('DROP POLICY IF EXISTS %I ON public.%I', pol.policyname, t);
      END LOOP;

      -- Create permissive SELECT for anon and authenticated
      EXECUTE format(
        'CREATE POLICY %I ON public.%I FOR SELECT TO anon, authenticated USING (true)',
        t || '_public_select', t
      );
    END IF;
  END LOOP;
END $$;

-- Products public view already exists; ensure anon has select
GRANT SELECT ON public.products_public TO anon;
