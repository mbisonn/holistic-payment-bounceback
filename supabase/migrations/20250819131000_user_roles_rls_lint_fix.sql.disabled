-- Fix lints on public.user_roles RLS
-- 1) Remove duplicate permissive SELECT policy
-- 2) Recreate single SELECT policy with SELECT-wrapped auth.* calls for performance

-- Drop duplicate permissive policy if it exists
DO $$
BEGIN
  IF EXISTS (
    SELECT 1 FROM pg_policies
    WHERE schemaname = 'public'
      AND tablename = 'user_roles'
      AND policyname = 'user_roles_select_combined'
  ) THEN
    EXECUTE 'DROP POLICY "user_roles_select_combined" ON public.user_roles';
  END IF;
END $$;

-- Ensure there is only one SELECT policy and it does not re-evaluate auth.* per row
DO $$
BEGIN
  IF EXISTS (
    SELECT 1 FROM pg_policies
    WHERE schemaname = 'public'
      AND tablename = 'user_roles'
      AND policyname = 'user_roles_select_no_recursion'
  ) THEN
    EXECUTE 'DROP POLICY "user_roles_select_no_recursion" ON public.user_roles';
  END IF;
END $$;

-- Recreate the performant policy
CREATE POLICY user_roles_select_no_recursion
ON public.user_roles
FOR SELECT
TO authenticated
USING (
  -- Owner can read their own role
  user_id = (SELECT auth.uid())
  OR 
  -- Admins (from JWT claim) can read all
  COALESCE((SELECT ((auth.jwt() -> 'app_metadata' ->> 'role') = 'admin')), FALSE)
);
