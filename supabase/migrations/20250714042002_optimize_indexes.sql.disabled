-- Comprehensive fix for all remaining performance warnings and security issues

-- 1. Fix remaining function security issues
CREATE OR REPLACE FUNCTION public.has_role()
RETURNS boolean
LANGUAGE sql
STABLE SECURITY DEFINER
SET search_path = public
AS $$
  SELECT EXISTS (
    SELECT 1 
    FROM auth.users
    WHERE id = auth.uid()
  );
$$;

-- Fix ambiguous column reference in has_role function
CREATE OR REPLACE FUNCTION public.has_role(check_user_id uuid, role_name text)
RETURNS boolean
LANGUAGE sql
STABLE SECURITY DEFINER
SET search_path = public
AS $$
  SELECT EXISTS (
    SELECT 1 
    FROM public.user_roles ur
    WHERE ur.user_id = check_user_id
      AND ur.role = role_name::app_role
  );
$$;

-- 2. Add missing indexes that are causing performance warnings
CREATE INDEX IF NOT EXISTS idx_orders_payment_reference ON public.orders(payment_reference);
CREATE INDEX IF NOT EXISTS idx_orders_customer_phone ON public.orders(customer_phone);
CREATE INDEX IF NOT EXISTS idx_profiles_email ON public.profiles(email);
CREATE INDEX IF NOT EXISTS idx_profiles_role ON public.profiles(role);
CREATE INDEX IF NOT EXISTS idx_product_reviews_product_id_approved ON public.product_reviews(product_id, is_approved);
CREATE INDEX IF NOT EXISTS idx_product_reviews_rating ON public.product_reviews(rating);
CREATE INDEX IF NOT EXISTS idx_email_settings_smtp_enabled ON public.email_settings(smtp_enabled);
CREATE INDEX IF NOT EXISTS idx_abandoned_checkouts_notified ON public.abandoned_checkouts(notified);
CREATE INDEX IF NOT EXISTS idx_abandoned_checkouts_created_at ON public.abandoned_checkouts(created_at);

-- 3. Add partial indexes for better performance on filtered queries
CREATE INDEX IF NOT EXISTS idx_orders_pending_status ON public.orders(created_at) 
WHERE status = 'pending';

CREATE INDEX IF NOT EXISTS idx_orders_failed_payment ON public.orders(created_at, customer_email) 
WHERE payment_status = 'failed';

CREATE INDEX IF NOT EXISTS idx_products_active_price ON public.products(price, created_at) 
WHERE is_active = true;

CREATE INDEX IF NOT EXISTS idx_email_logs_failed ON public.email_logs(created_at, recipient_email) 
WHERE status = 'failed';

-- 4. Add text search indexes for better search performance
CREATE INDEX IF NOT EXISTS idx_products_name_search ON public.products USING gin(to_tsvector('english', name));
CREATE INDEX IF NOT EXISTS idx_products_description_search ON public.products USING gin(to_tsvector('english', description));
CREATE INDEX IF NOT EXISTS idx_customer_tags_name_search ON public.customer_tags USING gin(to_tsvector('english', name));

-- 5. Optimize RLS policies to prevent function re-evaluation
DROP POLICY IF EXISTS "Users can view their own roles" ON public.user_roles;
DROP POLICY IF EXISTS "Admins can view all user roles" ON public.user_roles;

CREATE POLICY "Users can view their own roles" ON public.user_roles
FOR SELECT USING (
  user_id = (SELECT auth.uid())
);

CREATE POLICY "Admins can view all user roles" ON public.user_roles
FOR SELECT USING (
  has_role((SELECT auth.uid()), 'admin')
);

-- 6. Add constraints to improve query planning
DO $$
BEGIN
  IF NOT EXISTS (
    SELECT 1 FROM information_schema.table_constraints
    WHERE table_name = 'orders'
      AND constraint_name = 'check_total_amount_positive'
  ) THEN
    EXECUTE 'ALTER TABLE public.orders ADD CONSTRAINT check_total_amount_positive CHECK (total_amount >= 0)';
  END IF;
END $$;

DO $$
BEGIN
  IF NOT EXISTS (
    SELECT 1 FROM information_schema.table_constraints
    WHERE table_name = 'orders'
      AND constraint_name = 'check_shipping_fee_positive'
  ) THEN
    EXECUTE 'ALTER TABLE public.orders ADD CONSTRAINT check_shipping_fee_positive CHECK (shipping_fee >= 0)';
  END IF;
END $$;

DO $$
BEGIN
  IF NOT EXISTS (
    SELECT 1 FROM information_schema.table_constraints
    WHERE table_name = 'orders'
      AND constraint_name = 'check_discount_amount_positive'
  ) THEN
    EXECUTE 'ALTER TABLE public.orders ADD CONSTRAINT check_discount_amount_positive CHECK (discount_amount >= 0)';
  END IF;
END $$;

DO $$
BEGIN
  IF NOT EXISTS (
    SELECT 1 FROM information_schema.table_constraints
    WHERE table_name = 'products'
      AND constraint_name = 'check_price_positive'
  ) THEN
    EXECUTE 'ALTER TABLE public.products ADD CONSTRAINT check_price_positive CHECK (price >= 0)';
  END IF;
END $$;

DO $$
BEGIN
  IF NOT EXISTS (
    SELECT 1 FROM information_schema.table_constraints
    WHERE table_name = 'product_reviews'
      AND constraint_name = 'check_rating_range'
  ) THEN
    EXECUTE 'ALTER TABLE public.product_reviews ADD CONSTRAINT check_rating_range CHECK (rating >= 1 AND rating <= 5)';
  END IF;
END $$;

-- 7. Improve function performance with proper volatility
CREATE OR REPLACE FUNCTION public.get_function_definition(function_name text)
RETURNS text
LANGUAGE plpgsql
STABLE SECURITY DEFINER
SET search_path = public
AS $$
BEGIN
  RETURN pg_get_functiondef(to_regprocedure(function_name));
END;
$$;

-- 8. Add missing foreign key constraints for referential integrity
ALTER TABLE public.product_reviews 
ADD CONSTRAINT IF NOT EXISTS fk_product_reviews_product_id 
FOREIGN KEY (product_id) REFERENCES public.products(id) ON DELETE CASCADE;

-- 9. Optimize statistics collection
ALTER TABLE public.orders ALTER COLUMN created_at SET STATISTICS 1000;
ALTER TABLE public.orders ALTER COLUMN customer_email SET STATISTICS 1000;
ALTER TABLE public.orders ALTER COLUMN status SET STATISTICS 1000;
ALTER TABLE public.orders ALTER COLUMN payment_status SET STATISTICS 1000;
ALTER TABLE public.products ALTER COLUMN name SET STATISTICS 1000;
ALTER TABLE public.products ALTER COLUMN is_active SET STATISTICS 1000;
ALTER TABLE public.user_roles ALTER COLUMN user_id SET STATISTICS 1000;
ALTER TABLE public.user_roles ALTER COLUMN role SET STATISTICS 1000;

-- 10. Create function for efficient admin checking
CREATE OR REPLACE FUNCTION public.current_user_is_admin()
RETURNS boolean
LANGUAGE sql
STABLE SECURITY DEFINER
SET search_path = public
AS $$
  SELECT EXISTS (
    SELECT 1 
    FROM public.user_roles ur
    WHERE ur.user_id = auth.uid()
      AND ur.role = 'admin'::app_role
  );
$$;

-- 11. Update policies to use the optimized function
DROP POLICY IF EXISTS "Admins can manage customer tags" ON public.customer_tags;
CREATE POLICY "Admins can manage customer tags" ON public.customer_tags
FOR ALL USING (current_user_is_admin());

DROP POLICY IF EXISTS "Admins can manage customer tag assignments" ON public.customer_tag_assignments;
CREATE POLICY "Admins can manage customer tag assignments" ON public.customer_tag_assignments
FOR ALL USING (current_user_is_admin());

DROP POLICY IF EXISTS "Admins can manage email campaigns" ON public.email_campaigns;
CREATE POLICY "Admins can manage email campaigns" ON public.email_campaigns
FOR ALL USING (current_user_is_admin());

DROP POLICY IF EXISTS "Admins can manage email logs" ON public.email_logs;
CREATE POLICY "Admins can manage email logs" ON public.email_logs
FOR ALL USING (current_user_is_admin())
WITH CHECK (current_user_is_admin());

DROP POLICY IF EXISTS "Admins can manage email templates" ON public.email_templates;
CREATE POLICY "Admins can manage email templates" ON public.email_templates
FOR ALL USING (current_user_is_admin());

DROP POLICY IF EXISTS "Admins can manage invoices" ON public.invoices;
CREATE POLICY "Admins can manage invoices" ON public.invoices
FOR ALL USING (current_user_is_admin());

DROP POLICY IF EXISTS "Admins can manage order bumps" ON public.order_bumps;
CREATE POLICY "Admins can manage order bumps" ON public.order_bumps
FOR ALL USING (current_user_is_admin());

DROP POLICY IF EXISTS "Admins can manage orders" ON public.orders;
CREATE POLICY "Admins can manage orders" ON public.orders
FOR ALL USING (current_user_is_admin());

DROP POLICY IF EXISTS "Admins can manage products" ON public.products;
CREATE POLICY "Admins can manage products" ON public.products
FOR ALL USING (current_user_is_admin());

DROP POLICY IF EXISTS "Admins can manage shipping settings" ON public.shipping_settings;
CREATE POLICY "Admins can manage shipping settings" ON public.shipping_settings
FOR ALL USING (current_user_is_admin());

DROP POLICY IF EXISTS "Admins can manage upsell products" ON public.upsell_products;
CREATE POLICY "Admins can manage upsell products" ON public.upsell_products
FOR ALL USING (current_user_is_admin());

DROP POLICY IF EXISTS "Admins can manage user roles" ON public.user_roles;
CREATE POLICY "Admins can manage user roles" ON public.user_roles
FOR ALL USING (current_user_is_admin());

-- 12. Final statistics update
ANALYZE public.orders;
ANALYZE public.products;
ANALYZE public.user_roles;
ANALYZE public.profiles;
ANALYZE public.email_logs;
ANALYZE public.invoices;
ANALYZE public.order_bumps;
ANALYZE public.upsell_products;
ANALYZE public.shipping_settings;
ANALYZE public.email_templates;
ANALYZE public.email_campaigns;
ANALYZE public.customer_tags;
ANALYZE public.customer_tag_assignments;
ANALYZE public.product_reviews;
ANALYZE public.analytics_metrics;
ANALYZE public.abandoned_checkouts;