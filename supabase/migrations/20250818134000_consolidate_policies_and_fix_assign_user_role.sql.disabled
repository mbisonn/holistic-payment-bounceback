-- 1) Consolidate duplicate permissive SELECT policies
-- orders: collapse admin full access and user owns row into one policy for SELECT
DO $$
DECLARE
  pol record;
BEGIN
  IF EXISTS (
    SELECT 1 FROM pg_tables WHERE schemaname='public' AND tablename='orders'
  ) THEN
    -- Drop existing SELECT policies to avoid duplicates
    FOR pol IN
      SELECT policyname 
      FROM pg_policies 
      WHERE schemaname='public' AND tablename='orders' AND cmd='select'
    LOOP
      EXECUTE format('DROP POLICY IF EXISTS %I ON public.orders', pol.policyname);
    END LOOP;

    -- Create a single combined SELECT policy
    CREATE POLICY "orders_select_combined"
      ON public.orders
      FOR SELECT
      TO authenticated
      USING (
        -- Admins OR owners
        exists (
          select 1 from public.user_roles ur
          where ur.user_id = (select auth.uid()) and ur.role = 'admin'
        )
        OR
        (user_id = (select auth.uid()))
      );
  END IF;
END $$;

-- user_roles: collapse admin manage and user can view own into one policy for SELECT
DO $$
DECLARE
  pol record;
BEGIN
  IF EXISTS (
    SELECT 1 FROM pg_tables WHERE schemaname='public' AND tablename='user_roles'
  ) THEN
    -- Drop existing SELECT policies
    FOR pol IN
      SELECT policyname 
      FROM pg_policies 
      WHERE schemaname='public' AND tablename='user_roles' AND cmd='select'
    LOOP
      EXECUTE format('DROP POLICY IF EXISTS %I ON public.user_roles', pol.policyname);
    END LOOP;

    CREATE POLICY "user_roles_select_combined"
      ON public.user_roles
      FOR SELECT
      TO authenticated
      USING (
        exists (
          select 1 from public.user_roles ur
          where ur.user_id = (select auth.uid()) and ur.role = 'admin'
        )
        OR
        (user_id = (select auth.uid()))
      );
  END IF;
END $$;

-- 2) Force-recreate function public.assign_user_role(uuid) with correct column and search_path
DROP FUNCTION IF EXISTS public.assign_user_role(uuid);

CREATE OR REPLACE FUNCTION public.assign_user_role(p_user_id uuid)
RETURNS void
LANGUAGE plpgsql
SET search_path = public, auth
AS $$
DECLARE
  desired_role text;
BEGIN
  SELECT COALESCE(u.raw_app_meta_data->>'role', 'viewer')
    INTO desired_role
  FROM auth.users u
  WHERE u.id = p_user_id;

  IF desired_role NOT IN ('admin','manager','editor','viewer') THEN
    desired_role := 'viewer';
  END IF;

  UPDATE public.user_roles
     SET role = desired_role::public.app_role
   WHERE user_id = p_user_id;

  IF NOT FOUND THEN
    INSERT INTO public.user_roles (user_id, role)
    VALUES (p_user_id, desired_role::public.app_role);
  END IF;
END;
$$;
