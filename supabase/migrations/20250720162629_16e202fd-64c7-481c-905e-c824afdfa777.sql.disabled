
-- Fix all remaining multiple permissive policies and unused index issues plus security warnings

-- 1. Fix product_categories - consolidate the conflicting policies
DROP POLICY IF EXISTS "product_categories_admin_manage" ON public.product_categories;
DROP POLICY IF EXISTS "product_categories_public_read" ON public.product_categories;
DROP POLICY IF EXISTS "Unified product categories access" ON public.product_categories;

-- Create single optimized policy for product_categories
CREATE POLICY "product_categories_unified_access" ON public.product_categories
  FOR ALL USING (true)
  WITH CHECK (current_user_is_admin());

-- 2. Fix profiles - remove the duplicate update policy
DROP POLICY IF EXISTS "Users can update their own profile" ON public.profiles;
-- Keep only the comprehensive profiles_access policy

-- 3. Remove all unused indexes that are flagged
DROP INDEX IF EXISTS public.idx_customer_tag_assignments_tag_id;
DROP INDEX IF EXISTS public.idx_email_campaigns_template_id;
DROP INDEX IF EXISTS public.idx_email_logs_campaign_id;
DROP INDEX IF EXISTS public.idx_email_logs_template_id;
DROP INDEX IF EXISTS public.idx_invoices_order_id;
DROP INDEX IF EXISTS public.idx_product_reviews_product_id;
DROP INDEX IF EXISTS public.idx_user_roles_user_id;
DROP INDEX IF EXISTS public.idx_profiles_user_id;

-- 4. Create only essential indexes for foreign key relationships that are actually used
CREATE INDEX IF NOT EXISTS idx_customer_tag_assignments_tag_id_fk ON public.customer_tag_assignments(tag_id) WHERE tag_id IS NOT NULL;
CREATE INDEX IF NOT EXISTS idx_invoices_order_id_fk ON public.invoices(order_id) WHERE order_id IS NOT NULL;

-- 5. Fix security function search_path issues
CREATE OR REPLACE FUNCTION public.has_role(check_user_id uuid, role_name text)
RETURNS boolean
LANGUAGE sql
STABLE SECURITY DEFINER
SET search_path = public, pg_temp
AS $$
  SELECT EXISTS (
    SELECT 1 
    FROM public.user_roles ur
    WHERE ur.user_id = check_user_id
      AND ur.role = role_name::app_role
  );
$$;

CREATE OR REPLACE FUNCTION public.current_user_is_admin()
RETURNS boolean
LANGUAGE sql
STABLE SECURITY DEFINER
SET search_path = public, pg_temp  
AS $$
  SELECT EXISTS (
    SELECT 1 
    FROM public.user_roles ur
    WHERE ur.user_id = auth.uid()
      AND ur.role = 'admin'::app_role
  );
$$;

-- 6. Update other security definer functions
CREATE OR REPLACE FUNCTION public.update_updated_at_column()
RETURNS trigger
LANGUAGE plpgsql
SECURITY DEFINER
SET search_path = public, pg_temp
AS $$
BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
END;
$$;

CREATE OR REPLACE FUNCTION public.update_user_timestamp()
RETURNS trigger
LANGUAGE plpgsql
SECURITY DEFINER
SET search_path = public, pg_temp
AS $$
BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
END;
$$;

-- 7. Optimize table statistics for better performance
ANALYZE public.products;
ANALYZE public.product_categories;
ANALYZE public.profiles;
ANALYZE public.user_roles;
ANALYZE public.orders;
ANALYZE public.invoices;
