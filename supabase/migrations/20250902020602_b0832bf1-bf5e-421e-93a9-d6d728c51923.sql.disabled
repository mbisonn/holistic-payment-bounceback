-- CRITICAL SECURITY FIX: Remove public access to customer data tables (Part 2)
-- Handle existing policies and create secure replacements

-- First, remove all public SELECT policies that expose customer data
DROP POLICY IF EXISTS "abandoned_checkouts_public_select" ON public.abandoned_checkouts;
DROP POLICY IF EXISTS "customer_analytics_public_select" ON public.customer_analytics;
DROP POLICY IF EXISTS "customer_tag_assignments_public_select" ON public.customer_tag_assignments;
DROP POLICY IF EXISTS "meal_plan_sync_public_select" ON public.meal_plan_sync;
DROP POLICY IF EXISTS "orders_public_select" ON public.orders;
DROP POLICY IF EXISTS "invoices_public_select" ON public.invoices;
DROP POLICY IF EXISTS "product_reviews_public_select" ON public.product_reviews;
DROP POLICY IF EXISTS "email_outbox_public_select" ON public.email_outbox;
DROP POLICY IF EXISTS "email_logs_public_select" ON public.email_logs;
DROP POLICY IF EXISTS "email_analytics_public_select" ON public.email_analytics;
DROP POLICY IF EXISTS "email_events_public_select" ON public.email_events;
DROP POLICY IF EXISTS "email_campaigns_public_select" ON public.email_campaigns;
DROP POLICY IF EXISTS "email_templates_public_select" ON public.email_templates;
DROP POLICY IF EXISTS "email_settings_public_select" ON public.email_settings;
DROP POLICY IF EXISTS "analytics_metrics_public_select" ON public.analytics_metrics;
DROP POLICY IF EXISTS "automation_rules_public_select" ON public.automation_rules;
DROP POLICY IF EXISTS "product_analytics_public_select" ON public.product_analytics;
DROP POLICY IF EXISTS "customer_exports_public_select" ON public.customer_exports;
DROP POLICY IF EXISTS "customer_tags_public_select" ON public.customer_tags;
DROP POLICY IF EXISTS "discount_codes_public_select" ON public.discount_codes;
DROP POLICY IF EXISTS "facebook_conversion_settings_public_select" ON public.facebook_conversion_settings;
DROP POLICY IF EXISTS "order_bumps_public_select" ON public.order_bumps;
DROP POLICY IF EXISTS "product_categories_public_select" ON public.product_categories;
DROP POLICY IF EXISTS "profiles_public_select" ON public.profiles;
DROP POLICY IF EXISTS "role_types_public_select" ON public.role_types;
DROP POLICY IF EXISTS "security_events_public_select" ON public.security_events;
DROP POLICY IF EXISTS "shipping_settings_public_select" ON public.shipping_settings;
DROP POLICY IF EXISTS "upsell_products_public_select" ON public.upsell_products;

-- Create secure policies for sensitive customer data tables
-- Only create if they don't already exist

-- Abandoned checkouts: Only admins can access
DO $$ BEGIN
    IF NOT EXISTS (SELECT 1 FROM pg_policies WHERE tablename = 'abandoned_checkouts' AND policyname = 'Admins can manage abandoned checkouts') THEN
        CREATE POLICY "Admins can manage abandoned checkouts" ON public.abandoned_checkouts
        FOR ALL USING (is_admin(current_user_id()));
    END IF;
END $$;

-- Customer analytics: Only admins can access  
DO $$ BEGIN
    IF NOT EXISTS (SELECT 1 FROM pg_policies WHERE tablename = 'customer_analytics' AND policyname = 'Admins can view customer analytics') THEN
        CREATE POLICY "Admins can view customer analytics" ON public.customer_analytics
        FOR ALL USING (is_admin(current_user_id()));
    END IF;
END $$;

-- Customer tag assignments: Only admins can access
DO $$ BEGIN
    IF NOT EXISTS (SELECT 1 FROM pg_policies WHERE tablename = 'customer_tag_assignments' AND policyname = 'Admins can manage customer tag assignments') THEN
        CREATE POLICY "Admins can manage customer tag assignments" ON public.customer_tag_assignments
        FOR ALL USING (is_admin(current_user_id()));
    END IF;
END $$;

-- Meal plan sync: Only admins can access
DO $$ BEGIN
    IF NOT EXISTS (SELECT 1 FROM pg_policies WHERE tablename = 'meal_plan_sync' AND policyname = 'Admins can manage meal plan sync') THEN
        CREATE POLICY "Admins can manage meal plan sync" ON public.meal_plan_sync
        FOR ALL USING (is_admin(current_user_id()));
    END IF;
END $$;

-- Invoices: Only admins can access
DO $$ BEGIN
    IF NOT EXISTS (SELECT 1 FROM pg_policies WHERE tablename = 'invoices' AND policyname = 'Admins can manage invoices') THEN
        CREATE POLICY "Admins can manage invoices" ON public.invoices
        FOR ALL USING (is_admin(current_user_id()));
    END IF;
END $$;

-- Product reviews: Only approved reviews can be viewed publicly
DO $$ BEGIN
    IF NOT EXISTS (SELECT 1 FROM pg_policies WHERE tablename = 'product_reviews' AND policyname = 'Anyone can view approved product reviews') THEN
        CREATE POLICY "Anyone can view approved product reviews" ON public.product_reviews
        FOR SELECT USING (is_approved = true);
    END IF;
END $$;

-- Discount codes: Users can validate active codes only
DO $$ BEGIN
    IF NOT EXISTS (SELECT 1 FROM pg_policies WHERE tablename = 'discount_codes' AND policyname = 'Users can validate discount codes') THEN
        CREATE POLICY "Users can validate discount codes" ON public.discount_codes
        FOR SELECT USING (is_active = true AND (expires_at IS NULL OR expires_at > now()));
    END IF;
END $$;

-- Order bumps: Only active ones can be viewed publicly
DO $$ BEGIN
    IF NOT EXISTS (SELECT 1 FROM pg_policies WHERE tablename = 'order_bumps' AND policyname = 'Anyone can view active order bumps') THEN
        CREATE POLICY "Anyone can view active order bumps" ON public.order_bumps
        FOR SELECT USING (is_active = true);
    END IF;
END $$;

-- Upsell products: Only active ones can be viewed publicly  
DO $$ BEGIN
    IF NOT EXISTS (SELECT 1 FROM pg_policies WHERE tablename = 'upsell_products' AND policyname = 'Anyone can view active upsell products') THEN
        CREATE POLICY "Anyone can view active upsell products" ON public.upsell_products
        FOR SELECT USING (is_active = true);
    END IF;
END $$;

-- Product categories: Can be viewed by everyone for storefront
DO $$ BEGIN
    IF NOT EXISTS (SELECT 1 FROM pg_policies WHERE tablename = 'product_categories' AND policyname = 'Anyone can view product categories') THEN
        CREATE POLICY "Anyone can view product categories" ON public.product_categories
        FOR SELECT USING (true);
    END IF;
END $$;

-- Shipping settings: Only active settings can be viewed for checkout
DO $$ BEGIN
    IF NOT EXISTS (SELECT 1 FROM pg_policies WHERE tablename = 'shipping_settings' AND policyname = 'Anyone can view active shipping settings') THEN
        CREATE POLICY "Anyone can view active shipping settings" ON public.shipping_settings
        FOR SELECT USING (is_active = true);
    END IF;
END $$;