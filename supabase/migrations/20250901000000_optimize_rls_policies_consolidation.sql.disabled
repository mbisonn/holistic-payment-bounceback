-- Optimize RLS policies by consolidating multiple permissive policies
-- This migration combines multiple permissive policies into single policies where possible
-- to improve query performance by reducing the number of policy checks

-- ABANDONED_CHECKOUTS
BEGIN;

-- Drop existing policies
DROP POLICY IF EXISTS abandoned_checkouts_admin_select ON public.abandoned_checkouts;
DROP POLICY IF EXISTS abandoned_checkouts_public_select ON public.abandoned_checkouts;

-- Create consolidated policy
CREATE POLICY "View abandoned checkouts" ON public.abandoned_checkouts
  FOR SELECT USING (
    public.has_role((SELECT auth.uid()), 'admin'::app_role) OR 
    public.has_role((SELECT auth.uid()), 'manager'::app_role) OR
    (SELECT auth.uid()) IS NOT NULL
  );

-- ANALYTICS_METRICS
DROP POLICY IF EXISTS analytics_metrics_admin_select ON public.analytics_metrics;
DROP POLICY IF EXISTS analytics_metrics_public_select ON public.analytics_metrics;

CREATE POLICY "View analytics metrics" ON public.analytics_metrics
  FOR SELECT USING (
    public.has_role((SELECT auth.uid()), 'admin'::app_role) OR 
    public.has_role((SELECT auth.uid()), 'analyst'::app_role) OR
    (SELECT auth.uid()) IS NOT NULL
  );

-- EMAIL_CAMPAIGNS
DROP POLICY IF EXISTS "Admins can manage email campaigns" ON public.email_campaigns;
DROP POLICY IF EXISTS email_campaigns_public_select ON public.email_campaigns;

CREATE POLICY "Manage email campaigns" ON public.email_campaigns
  FOR ALL USING (
    public.has_role((SELECT auth.uid()), 'admin'::app_role) OR
    public.has_role((SELECT auth.uid()), 'marketing'::app_role)
  );

-- EMAIL_TEMPLATES
DROP POLICY IF EXISTS "Admins can manage email templates" ON public.email_templates;
DROP POLICY IF EXISTS email_templates_public_select ON public.email_templates;

CREATE POLICY "View email templates" ON public.email_templates
  FOR SELECT USING (true);

CREATE POLICY "Manage email templates" ON public.email_templates
  FOR ALL USING (
    public.has_role((SELECT auth.uid()), 'admin'::app_role) OR
    public.has_role((SELECT auth.uid()), 'marketing'::app_role)
  );

-- ORDERS
DROP POLICY IF EXISTS "Users can view their own orders" ON public.orders;
DROP POLICY IF EXISTS orders_public_select ON public.orders;

-- Keep the existing admin policy as it's already optimized
-- CREATE POLICY "Admins can manage all orders" ON public.orders ...

-- PRODUCT_VARIANTS
DROP POLICY IF EXISTS "Admins can manage product variants" ON public.product_variants;
DROP POLICY IF EXISTS "Anyone can view product variants" ON public.product_variants;

CREATE POLICY "View product variants" ON public.product_variants
  FOR SELECT USING (true);

CREATE POLICY "Manage product variants" ON public.product_variants
  FOR ALL USING (
    public.has_role((SELECT auth.uid()), 'admin'::app_role) OR
    public.has_role((SELECT auth.uid()), 'inventory'::app_role)
  );

-- Add indexes to support RLS performance
CREATE INDEX IF NOT EXISTS idx_orders_user_id ON public.orders(user_id);
CREATE INDEX IF NOT EXISTS idx_abandoned_checkouts_user_id ON public.abandoned_checkouts(user_id);
CREATE INDEX IF NOT EXISTS idx_email_events_campaign_id ON public.email_events(campaign_id);

COMMIT;
