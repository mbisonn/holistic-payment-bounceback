-- Fix RLS policies for automation_rules table to use proper admin role checking
-- This migration fixes the RLS policy violations that were preventing settings from being saved

-- Drop the existing policy that only checks authentication
DROP POLICY IF EXISTS "Admins can manage automation rules" ON public.automation_rules;

-- Create a new policy that properly checks for admin role
CREATE POLICY "Admins can manage automation rules" ON public.automation_rules
FOR ALL USING (get_current_user_role() = 'admin');

-- Also ensure the get_current_user_role function exists and works properly
-- This function should already exist from previous migrations, but let's make sure
CREATE OR REPLACE FUNCTION public.get_current_user_role()
RETURNS TEXT AS $$
DECLARE
    user_role TEXT;
BEGIN
    -- Get the user's role from the user_roles table
    SELECT role::TEXT INTO user_role
    FROM public.user_roles
    WHERE user_id = auth.uid()
    LIMIT 1;
    
    -- Return the role or 'user' as default
    RETURN COALESCE(user_role, 'user');
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- Grant execute permission on the function
GRANT EXECUTE ON FUNCTION public.get_current_user_role() TO authenticated;

-- Ensure the automation_rules table has the correct structure
-- Add any missing columns that might be needed for the settings functionality
ALTER TABLE public.automation_rules 
ADD COLUMN IF NOT EXISTS trigger_data JSONB DEFAULT '{}',
ADD COLUMN IF NOT EXISTS is_active BOOLEAN DEFAULT true;

-- Create an index on the automation_rules table for better performance
CREATE INDEX IF NOT EXISTS idx_automation_rules_name_trigger_action 
ON public.automation_rules(name, trigger, action);

-- Ensure the table has proper timestamps
ALTER TABLE public.automation_rules 
ADD COLUMN IF NOT EXISTS created_at TIMESTAMP WITH TIME ZONE DEFAULT now(),
ADD COLUMN IF NOT EXISTS updated_at TIMESTAMP WITH TIME ZONE DEFAULT now();

-- Create trigger for updated_at column if it doesn't exist
CREATE OR REPLACE FUNCTION update_automation_rules_updated_at()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = now();
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Drop existing trigger if it exists
DROP TRIGGER IF EXISTS update_automation_rules_updated_at ON public.automation_rules;

-- Create the trigger
CREATE TRIGGER update_automation_rules_updated_at
    BEFORE UPDATE ON public.automation_rules
    FOR EACH ROW EXECUTE FUNCTION update_automation_rules_updated_at();
